/*
//todo rewrite without global vars. use narrow scope. call functions by passing var - value or reference - as arguments
*/

#include <iostream>
#include <fstream>
#include <locale>
#include <string>
#include <vector>
#include <limits>
#include <sstream>
#include "usingDeclarations.h"

char userLetterInput;
char userChoiceContinue;
string userFirstName;
string line;
vector <string> trickyWordsVector;
void printWords();
void letterIsAlpha();
void nameIsAlpha();
// void nameCurseWords(string userFirstName);

int main() {
	cout << "----------------<>-----------\n";
	cout << "Welcome to Your TRICKY WORDS Helper!\n";
	cout << "----------------<>-----------\n";
	
	nameIsAlpha();
	// nameCurseWords();

	do {
		letterIsAlpha();

		ifstream trickyWordsFile("trickyWordsList.txt");

		if (trickyWordsFile.is_open()) {
			if (trickyWordsVector.empty()) {
				while (getline(trickyWordsFile, line)) {
					if (line.size() > 0) {
						trickyWordsVector.push_back(line);
					}
				}
			}
		}	else {
			cerr << "Cannot open the file.";
		}

		trickyWordsFile.close();

		printWords();
		
		do {
			cout << "\nWould you like to enter another letter [y,n]?: ";
			cin >> userChoiceContinue;
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
		} while (char(tolower(userChoiceContinue)) != 'y' && char(tolower(userChoiceContinue)) != 'n');
	} while (char(tolower(userChoiceContinue)) == 'y');

	cout << "\n----------------<>-----------\n";
	cout << "Thank you for using Your TRICKY WORDS Helper!\n";
	cout << "----------------<>-----------\n";
	return 0;
} // end main()

void nameIsAlpha() {
	size_t nameOnlyAlpha{};

	do {
		cout << "\nEnter your first name: ";
		getline(cin, userFirstName);
		//todo test code alphabetical string: takes in newline \n. Shouldn't.
		//todo make elegant code.
		nameOnlyAlpha = userFirstName.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
	} while (nameOnlyAlpha != string::npos);
} // end nameIsAlpha()


void letterIsAlpha() {
	do {
		cout << "\nEnter a letter [a - z]: ";
		cin >> userLetterInput;
		cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores extra char inputted
		userLetterInput = toupper(userLetterInput);

		if (isalpha(userLetterInput)) {
			cout << "\n" << userFirstName << ",\n\nHere's your list of tricky words for the letter (" << char(toupper(userLetterInput)) << "):\n" << endl;
		}
	} while (!isalpha(userLetterInput));
} // end letterIsAlpha()

void printWords() {

	for (int i = 0; i < trickyWordsVector.size(); i++) {

		if (trickyWordsVector[i][0] == userLetterInput) {
			cout << trickyWordsVector[i];
			cout << "\n";
		}
	}
} // end printWords()

#if 0
void nameCurseWords(string userFirstName) {

//todo add code, lol

} // end nameCurseWords()

|| userFirstName[i] == ' '
#endif


#if 0

//TODO TEST THE PROGRAM
// A few best practices: https://codereview.stackexchange.com/questions/162569/checking-if-each-char-in-a-string-is-a-decimal-digit

#include <iostream>
#include <iomanip>
#include <string>
#include <regex>

bool wasInteger(const std::string& num) {
	return std::regex_match(num, std::regex("[+-]?[0-9]+"));
}

struct Test {
	std::string str;
	bool expected;
};

static const std::string CSI{ "\x1b[" };
static const std::string RED{ CSI + "31m" };
static const std::string GREEN{ CSI + "32m" };
static const std::string RESET{ CSI + "0m" };

int main() {
	static const Test tests[]{
		{"+", false},
		{"-", false},
		{"0", true},
		{"3", true},
		{"9", true},
		{"a", false},
		{"99a9", false},
		{"9909", true},
		{"", false},
		{"-3.14", false},
		{"+32768", true},
		{"-32768", true},
	};

	static const std::string badgood[]{
		RED + "[BAD] " + RESET,
		GREEN + "[OK] " + RESET
	};

	for (const auto& t : tests) {
		auto result = wasInteger(t.str);
		std::cout << badgood[result == t.expected]
			<< std::boolalpha << "got " << result
			<< ", expected " << t.expected
			<< " from \"" << t.str << "\"\n";
	}
}

#endif
