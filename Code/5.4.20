//todo figure out which curse words go through, add hexadecimal encoding so they will reject!

// three are not rejected! 
// ScheißKopf
// RáIcleach
// Cabrão

#include <iostream>
#include <fstream>
#include <locale>
#include <string>
#include <vector>
#include <limits>
#include <sstream>
#include <windows.h>
#include <wchar.h>
#include "usingDeclarations.hpp" 
#undef max

vector <string> trickyWordsVector;
vector <wstring> nameCurseWordsVector;
void printWords(char userLetterInput);
void getTrickyWords();
void getNameCurseWords();

int main() {
	cout << "----------------<>-----------\n";
	cout << "Welcome to Your TRICKY WORDS Helper!\n";
	cout << "----------------<>-----------\n";

	wstring userFirstName;
	size_t firstNameOnlyAlpha{};
	bool isNameCurseWord = false;

	do {
		cout << "\nEnter your first name: ";
		getline(wcin, userFirstName);

		// add UTF-8 conversion. possible answer: https://stackoverflow.com/questions/42793735/how-to-convert-between-widecharacter-and-multi-byte-character-string-in-windows

		// int convertWideToMB = WideCharToMultiByte(CP_UTF8, 0, userFirstName.c_str(), userFirstName.length(), NULL, 0, NULL, NULL);

		for (unsigned __int8 i = 1; i < userFirstName.length(); i++) {
			if (userFirstName[i - 1] == ' ') {
				userFirstName[i] = towupper(userFirstName[i]);
			}
			else {
				userFirstName[i] = towlower(userFirstName[i]);
			}
		}
		userFirstName[0] = towupper(userFirstName[0]);
		firstNameOnlyAlpha = userFirstName.find_first_of(L"0123456789`~!@#$%^&*()':'';''/'-_=+{}[]|:<>,.' '?'\t\"");

		getNameCurseWords();

		if (find(nameCurseWordsVector.begin(), nameCurseWordsVector.end(), userFirstName) != nameCurseWordsVector.end()) {
			cout << "Curse word entered. Please freakin' try again.\n";
			isNameCurseWord = true;
		}
		else {
			isNameCurseWord = false;
		}
	} while (isNameCurseWord || firstNameOnlyAlpha != string::npos || userFirstName.empty());

	char userLetterInput;
	char userChoiceContinue;

	do {
		do {
			cout << "\nEnter a letter [a-z]: ";
			cin >> userLetterInput;
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			userLetterInput = toupper(userLetterInput);

			if (isalpha(userLetterInput)) {
				wcout << "\nHey " << userFirstName << ",\n\nHere's your list of tricky words for the letter (" << char(toupper(userLetterInput)) << "):\n" << endl;
			}
		} while (!isalpha(userLetterInput));

		getTrickyWords();

		printWords(userLetterInput);

		do {
			cout << "\nWould you like to enter another letter [y,n]?: ";
			cin >> userChoiceContinue;
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
		} while (char(tolower(userChoiceContinue)) != 'y' && char(tolower(userChoiceContinue)) != 'n');
	} while (char(tolower(userChoiceContinue)) == 'y');

	cout << "\n----------------<>-----------\n";
	cout << "Thank you for using Your TRICKY WORDS Helper!\n";
	cout << "\n----------------<>-----------\n";

	return 0;
} // end main()

void printWords(char userLetterInput) {
	for (int i = 0; i < trickyWordsVector.size(); i++) {
		if (trickyWordsVector[i][0] == userLetterInput) {
			cout << trickyWordsVector[i];
			cout << "\n";
		}
	}
} // end printWords()

void getTrickyWords() {
	ifstream trickyWordsFile("trickyWordsList.txt");

	if (trickyWordsFile.is_open()) {
		if (trickyWordsVector.empty()) {
			string line;
			while (getline(trickyWordsFile, line)) {
				if (line.size() > 0) {
					trickyWordsVector.push_back(line);
				}
			}
		}
	}
	else {
		cerr << "Cannot open the file.";
	}

	trickyWordsFile.close();

} // end getTrickyWords()

void getNameCurseWords() {
	wifstream nameCurseWordsFile("nameCurseWordsList.txt");

	if (nameCurseWordsFile.is_open()) {
		if (nameCurseWordsVector.empty()) {
			wstring line;
			while (getline(nameCurseWordsFile, line)) {
				if (line.size() > 0) {
					nameCurseWordsVector.push_back(line);
				}
			}
		}
	}
	else {
		cerr << "Cannot open the file, you sailor mouth. ;)";
	}

	nameCurseWordsFile.close();

} // end getNameCurseWords()
