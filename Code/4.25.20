#include <iostream>
#include <fstream>
#include <locale>
#include <string>
#include <vector>
#include <limits>
#include <sstream>
#include <windows.h>
#include <wchar.h>
#include "usingDeclarations.hpp" 

vector <string> trickyWordsVector;
vector <wstring> nameCurseWordsVector;
void printWords(char userLetterInput);
void getTrickyWords();
void getNameCurseWords();

int main() {	
	cout << "----------------<>-----------\n";
	cout << "Welcome to Your TRICKY WORDS Helper!\n";
	cout << "----------------<>-----------\n";

	wstring userFirstName;
	size_t firstNameOnlyAlpha{};
	bool isNameCurseWord = false;

	do {
		cout << "\nEnter your first name: ";
		getline(wcin, userFirstName);

		// add UTF-8 conversion
		int convertUnicodeCharToUTF8 = MultiByteToWideChar(CP_UTF8, );

		for (unsigned __int8 i = 1; i < userFirstName.length(); i++) {
			if (userFirstName[i - 1] == ' ') {
				userFirstName[i] = towupper(userFirstName[i]);
			} else {
				userFirstName[i] = towlower(userFirstName[i]);
			}
		}
		userFirstName[0] = towupper(userFirstName[0]);
		firstNameOnlyAlpha = userFirstName.find_first_of(L"0123456789`~!@#$%^&*()':'';''/'-_=+{}[]|:<>,.' '?'\t\"");

		getNameCurseWords();

#if 0
		//todo testing erase - find raw bytes
		for (int i = 0; i < userFirstName.length(); i++) {
			wcout << &userFirstName[i];
			cout << "\n";
		}
		
		--
		//todo FIX accepts some unicode curse words like ScheißKopf = encoding issue
		// displays as ScheiáKopf - still accepts curse word even when put into txt file
		* possible answer: https://stackoverflow.com/questions/920511/how-to-visualize-bytes-with-c-c

		From stack overflow :

		This sounds like an encoding issue.There are several different ways to encode non - English characters.There's multi-byte Unicode encoding, UTF-8, where a single character is encoded as two or more bytes; there's a family of ISO - 8859 - based encodings, where the high bit bytes are mapped to different characters, with the same bytes being used for different characters between ISO - 8859 variations.This is something that you'll need to figure out by looking at the raw bytes.
			- Sam V.

		// did person declare this multibyte function then call it from main?? no. oh, wait. wait. the person put the int wide character nums that coverts the multibyte into a new vector and declared the pointer to the wchar_t and assigned it a variable wstr that creates a new wchar_t vector of wchars_num??

			so, to manage the memory, this person created a new vector then deleted it at the end, so it wouldn't crash the device and cause all kinds of mayhem.

			ah, i see. 

			but, new and delete shouldn't be used directly, in this case, but not at all?? will research. because it will cause all kinds of mayhem. lol.:) MSDN talks about security issues and needing to manage memory.

			wow, cool! 

			ok, let's continue...
							
		// https://stackoverflow.com/questions/6693010/how-do-i-use-multibytetowidechar
			
			int wchars_num = MultiByteToWideChar(CP_UTF8, 0, x.c_str(), -1, NULL, 0);
		wchar_t* wstr = new wchar_t[wchars_num];
		MultiByteToWideChar(CP_UTF8, 0, x.c_str(), -1, wstr, wchars_num);
		// do whatever with wstr
		delete[] wstr;





		// possible answer - convert extended ascii to utf-8: https://stackoverflow.com/questions/35879445/convert-extended-ascii-character-codes-to-utf-8-byte-codes

		// notes: 225 ascii german converted to 160 spanish. hmmm, interesting :) says 225 but displays 160.

#endif
		
		if (find(nameCurseWordsVector.begin(), nameCurseWordsVector.end(), userFirstName) != nameCurseWordsVector.end()) {
			cout << "Curse word entered. Please freakin' try again.\n";
			isNameCurseWord = true; 
		} 	else {
			isNameCurseWord = false;
		}
	} while (isNameCurseWord || firstNameOnlyAlpha != string::npos || userFirstName.empty());

	char userLetterInput; 
	char userChoiceContinue;

	do {
		do {
		cout << "\nEnter a letter [a-z]: ";
		cin >> userLetterInput;
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		userLetterInput = toupper(userLetterInput);

		if (isalpha(userLetterInput)) {
			wcout << "\nHey " << userFirstName << ",\n\nHere's your list of tricky words for the letter (" << char(toupper(userLetterInput)) << "):\n" << endl;
			}
		} while (!isalpha(userLetterInput));

		getTrickyWords();

		printWords(userLetterInput);
		
		do {
			cout << "\nWould you like to enter another letter [y,n]?: ";
			cin >> userChoiceContinue;
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
		} while (char(tolower(userChoiceContinue)) != 'y' && char(tolower(userChoiceContinue)) != 'n');
	} while (char(tolower(userChoiceContinue)) == 'y');

	cout << "\n----------------<>-----------\n";
	cout << "Thank you for using Your TRICKY WORDS Helper!\n";
	cout << "\n----------------<>-----------\n";

	return 0;
} // end main()

void printWords(char userLetterInput) {
	for (int i = 0; i < trickyWordsVector.size(); i++) {
		if (trickyWordsVector[i][0] == userLetterInput) {
			cout << trickyWordsVector[i];
			cout << "\n";
		}
	}
} // end printWords()

void getTrickyWords() {
	ifstream trickyWordsFile("trickyWordsList.txt");

	if (trickyWordsFile.is_open()) {
		if (trickyWordsVector.empty()) {
			string line;
			while (getline(trickyWordsFile, line)) {
				if (line.size() > 0) {
					trickyWordsVector.push_back(line);
				}
			}
		}
	}
	else {
		cerr << "Cannot open the file.";
	}

	trickyWordsFile.close();

} // end getTrickyWords()

void getNameCurseWords() {
	wifstream nameCurseWordsFile("nameCurseWordsList.txt");

	if (nameCurseWordsFile.is_open()) {
		if (nameCurseWordsVector.empty()) {  
			wstring line;
			while (getline(nameCurseWordsFile, line)) {
				if (line.size() > 0) {
					nameCurseWordsVector.push_back(line);
				}
			}
		}
	}
	else {
		cerr << "Cannot open the file, you sailor mouth. ;)";
	}

	nameCurseWordsFile.close();

} // end getNameCurseWords()
